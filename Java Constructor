## Welcome to KKEL for Java

# LESSON: Java Constructors
   
  - Rules for creating a Constructor
  - Constructor Overloading
  - Constructor Chaining
  
### Rules for creating a Java Constructor
1. It has the same name as the class
2. It should not return a value not even void

### First Constructor Java example
```
class Demo{
      int  value1;
      int  value2;
      Demo(){
         value1 = 10;
         value2 = 20;
         System.out.println("Inside Constructor");
     }
 
     public void display(){
        System.out.println("Value1 === "+value1);
        System.out.println("Value2 === "+value2);
    }
 
   public static void main(String args[]){
       Demo d1 = new Demo();
      d1.display();
  }
}
```

Save , Run & Compile the code. Observe the output. 
Output:
```
Inside Constructor
Value1 === 10
Value2 === 20
```
### Constructor Overloading
Constructor overloading is a technique in Java in which a class can have any number of constructors that differ in parameter list

#### Examples of valid  constructors for class Account are 
```
Account(int a);
Account (int a,int b);
Account (String a,int b);
```

#### Example to understand Constructor Overloading 

```
class Demo{
      int  value1;
      int  value2;
      /*Demo(){
       value1 = 10;
       value2 = 20;
       System.out.println("Inside 1st Constructor");
     }*/
     Demo(int a){
      value1 = a;
      System.out.println("Inside 2nd Constructor");
    }
    Demo(int a,int b){
    value1 = a;
    value2 = b;
    System.out.println("Inside 3rd Constructor");
   }
   public void display(){
      System.out.println("Value1 === "+value1);
      System.out.println("Value2 === "+value2);
  }
  public static void main(String args[]){
    Demo d1 = new Demo();
    Demo d2 = new Demo(30);
    Demo d3 = new Demo(30,40);
    d1.display();
    d2.display();
    d3.display();
 }
}
```
